"""
This class is responsible for generating the dataset for segmentation.
"""
from typing import List
from os import path, listdir

import numpy as np
import cv2

from .roi_finder import ROIFinder
from .create_dir import create_dir

class SegmentationDatasetGenerator:
    """
    This class is responsible for generating the dataset for segmentation.
    
    The dataset is generated by iterating over the views in the dataset and processing the walks for each subject.
    
    Attributes:
        roi_finder (ROIFinder): The region of interest finder.
        images_dir (str): The directory containing the images.
        frs_dir (str): The directory containing the frames.
        mks_dir (str): The directory containing the masks.
        views (List[str]): The list of views in the dataset.
        training_silhouettes (str): The directory to save the training silhouettes.
        masked_silhouettes (str): The directory to save the masked silhouettes.
        verbose (bool): A flag to indicate if the generator should print information during processing.
    
    Methods:
        _process_sequences: Processes the sequences of images for a given subject, walk, and sequence.
        _process_walks: Processes the walks for a given subject.
        _process_views: Processes each view in the dataset.
        generate_dataset: Generates the dataset for segmentation.
    """
    def __init__(
        self,
        roi_finder: ROIFinder,
        images_dir: str,
        frs_dir: str,
        mks_dir: str,
        views: List[str],
        training_silhouettes: str,
        masked_silhouettes: str,
        verbose: bool = False
        ):
        self.roi_finder = roi_finder
        self.images_dir = images_dir
        self.frs_dir = frs_dir
        self.mks_dir = mks_dir
        self.views = views
        self.training_silhouettes = training_silhouettes
        self.masked_silhouettes = masked_silhouettes
        self.verbose = verbose
        self.cnt = 0

    def _process_sequences(self, subject: str, walk: str, seq_dir: str, masks_dir: str, seq: str):
        """
        Processes the sequences of images for a given subject, walk, and sequence.

        Args:
            subject (str): The subject identifier.
            walk (str): The walk identifier.
            seq_dir (str): The directory path of the sequence.
            masks_dir (str): The directory path of the masks.
            seq (str): The sequence identifier.

        Returns:
            None
        """
        seq_frames_dir = path.join(seq_dir, seq)
        lfiles = sorted(listdir(seq_frames_dir))
        for img_path in lfiles:
            img = cv2.imread(path.join(seq_frames_dir, img_path))
            mask = cv2.imread(path.join(masks_dir, subject, walk, seq, img_path), 0)
            try:
                x, y, w, h = self.roi_finder.find_roi(img)
                bbox = [x, y, w, h]
                gti = mask[bbox[1]:bbox[3], bbox[0]:bbox[2]]
                roi = img[bbox[1]:bbox[3], bbox[0]:bbox[2]]
                gti_path = path.join(self.masked_silhouettes, f'{subject}-{seq}-{str(self.cnt).zfill(7)}.jpg')
                roi_path = path.join(self.training_silhouettes, f'{subject}-{seq}-{str(self.cnt).zfill(7)}.jpg')

                if roi.shape[1] > 60 or roi.shape[1] < 150:
                    cv2.imwrite(gti_path, gti)
                    cv2.imwrite(roi_path, roi)
                    self.cnt += 1
            except Exception as e:  # pylint: disable=broad-except
                if self.verbose:
                    print(e)
        
    def _process_walks(self, frames_dir: str, masks_dir: str, subject: str):
        """
        Process the walks for a given subject.

        Args:
            frames_dir (str): The directory containing the frames.
            masks_dir (str): The directory containing the masks.
            subject (str): The subject identifier.

        Returns:
            None
        """
        for walk in ['nm', 'bg', 'cl']:
            seq_dir = path.join(frames_dir, subject, walk)
            seqs = sorted(listdir(seq_dir))
            seqs = np.random.choice(seqs, size=2, replace=False)
            for seq in seqs:
                self._process_sequences(subject, walk, seq_dir, masks_dir, seq)
    
    def _process_views(self):
        """
        Process each view in the dataset.
        
        This method iterates over each view in the dataset and calls the _process_walks method
        to process the walks for each subject in the view.
        """
        for view in self.views:
            frames_dir = path.join(self.images_dir, view, self.frs_dir)
            masks_dir = path.join(self.images_dir, view, self.mks_dir)
            if self.verbose:
                print(f'GENERATING GAIT REPRESENTATIONS FROM VIEW: {view}')
            subjects = sorted(listdir(path.join(self.images_dir, view, self.frs_dir)))
            for subject in subjects:
                if self.verbose:
                    print(f'Processing subject: {subject} view: {view}')
                self._process_walks(frames_dir, masks_dir, subject)
                
    def generate_dataset(self):
        """
        Generates the dataset for segmentation.

        This method creates the necessary directories for training silhouettes and masked silhouettes.
        It then processes the views to generate the dataset.
        """
        create_dir(self.training_silhouettes, force=True)
        create_dir(self.masked_silhouettes, force=True)
        self._process_views()
